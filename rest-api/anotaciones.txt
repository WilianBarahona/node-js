REST --> Representational State Transfer, un servicio rest no es una arquitectura de software, sino un conjunto
de restricciones con las que podemos crear un estilo de arquitectura de software, la cual podemos usar para crear
aplicaciones web respetando los protocolos HTTP.

API --> Aplication programming interface es una definicion de subrutinas, protocolos, y herramientas para crear software

Un RESTful API debe contener al menos las cuatro solicitudes basicas CRUD  -> C(POST) R(GET) U(PUT) D(DELETE)

//Instalar express (es un framework para gestionar el servidor)
npm install --save express
npm i -S express

//Body-Parser --> permite que al hacer peticiones != get(post, delete ,...) poder parsear o obtner la url
// Esta libreria funciona como un middleware cada que se realice una peticion http se pasa por distintas capas (jerarquias de peticiones)

npm i -S body-parser

//nodemon --> modulo para que cada vez que se detecte un cambio en el servidor este se reinicie automaticamete es un tipo de watch
npm i -g nodemon //instalarlo de manera global

//Configuracion del start
 "scripts": {
    "start": "nodemon index.js"
    "test": "echo \"Error: no test specified\" && exit 1"
  },

  //para iniciar solo escribimos el comando npm start


// Full Rest Api
/* https://assertible.com/blog/7-http-methods-every-web-developer-should-know-and-how-to-test-them

EndPoint -> punto de entrada o acceso ejemplo /users

Debe tener como minimo los metodos http:
  *GET: Las solicitudes GET son los métodos más comunes y ampliamente utilizados en API y sitios web. 
  En pocas palabras, el método GET se utiliza para recuperar datos de un servidor en el recurso 
  especificado . Por ejemplo, supongamos que tiene una API con un /userspunto final. 
  Hacer una solicitud GET a ese punto final debería devolver una lista de todos los usuarios disponibles.

  LOS DATOS VIAJAN EN LA CABEZERA DEL MENSAJE (URL)

  Dado que una solicitud GET solo solicita datos y no modifica ningún recurso, se considera un método seguro.

  En un nivel básico, estas cosas deben validarse:
    *Verifique que una solicitud GET válida devuelva un 200código de estado.
    *Asegúrese de que una solicitud GET a un recurso específico devuelva los datos correctos. 
    Por ejemplo, GET /usersdevuelve una lista de usuarios.

 
    GET ==> /store/inventory  --> retorna todo el inventario
            /store/order/{orderId} -> buscar una orden por id
            (GET: (READ))


  *POST: El segundo método HTTP más común que encontrará en sus pruebas de API es POST. 
         Como se mencionó anteriormente , las POST solicitudes se utilizan para enviar datos al servidor API y 
         crear o actualizar un recurso. Dado que las solicitudes POST modifican los datos,
          es importante tener pruebas de API para todos sus métodos POST .

    LOS DATOS VIAJAN EN EL CUERPO DEL MENSAJE Y NO EN LA CABEZERA A DIFERENCIA DE GET

    Aquí hay algunos consejos para probar las solicitudes POST:

    *Cree un recurso con una POST solicitud y asegúrese de que 200 se devuelva un código de estado.
    *Luego, haga una GETsolicitud para ese recurso y asegúrese de que los datos se hayan guardado correctamente.
    *Agregue pruebas que garanticen que las POSTsolicitudes fallen con datos incorrectos o con formato incorrecto.

  POST ==> /store/order -> realiza una orden o pedido 
            (POST: (INSERT))

  *PUT: De manera similar a POST, las solicitudes PUT se utilizan para enviar datos a la API para crear o actualizar un
        recurso . La diferencia es que las solicitudes PUT son idempotentes . Es decir, llamar a la misma solicitud PUT 
        varias veces siempre producirá el mismo resultado . Por el contrario, llamar a una solicitud POST repetidamente
        puede tener efectos secundarios de crear el mismo recurso varias veces.

    Probar los PUT de una API es muy similar a probar las solicitudes POST. Pero ahora que sabemos la diferencia entre los dos (idempotencia), podemos crear pruebas de API para confirmar este comportamiento .

    Verifique estas cosas cuando pruebe las solicitudes PUT:

    *Repetidamente, una PUT solicitud siempre devuelve el mismo resultado.
    *Después de actualizar un recurso con una PUTsolicitud, una GETsolicitud para ese recurso debería devolver los datos nuevos.
    *PUT las solicitudes deberían fallar si se proporcionan datos no válidos en la solicitud; no se debe actualizar nada .

    (PUT: (UPDATE))

  *DELETE:  DELETE es exactamente como suena: elimine el recurso en la URL especificada . 
            Este método es uno de los más comunes en las API RESTful, por lo que es bueno saber cómo funciona.

    Si se crea un nuevo usuario con una solicitud POST para /users, 
    y se puede recuperar con una GET solicitud para /users/{{userid}}, 
    entonces, al realizar una solicitud DELETE, /users/{{userid}} se eliminará por completo a ese usuario.

    Las solicitudes DELETE deben probarse en gran medida ya que generalmente eliminan datos de una base de datos. 
    Tenga cuidado al probar los métodos DELETE, asegúrese de usar las credenciales correctas y de no probar con datos reales 
    las solicitudes del usuario.

    Un caso de prueba típico para una solicitud DELETE se vería así:

    *Cree un nuevo usuario con una POST solicitud para/users
    *Con el ID de usuario devuelto desde POST, haga una DELETEsolicitud a/users/{{userid}}
    *Una solicitud GET posterior a /users/{{userid}}debe devolver un código de estado 404 no encontrado.
    *Además, el envío de una solicitud DELETE a un recurso desconocido debería devolver un código de estado que no sea 200 .

    DELETE ==> /store/order/{orderId} --> elimina la orden con ese id

    (DELETE: (DELETE))

    *PATCH: es uno de los metodos http menos conocidos, es similar a POST y PUT, con la gran diferencia que PATCH solo aplica modificaciones
            parciales al recurso

            Para ampliar una modificación parcial, supongamos que su API tiene un /users/{{userid}}punto final y un usuario tiene un nombre de usuario .
            Con una solicitud PATCH, es posible que solo necesite enviar el nombre de usuario actualizado en el cuerpo de la solicitud, en lugar de POST y PUT 
            que requieren la entidad de usuario completa.

   *HEAD: El HEAD es casi idéntico GET, excepto sin el cuerpo de respuesta . En otras palabras, si GET /usersdevuelve una lista de usuarios,
          HEAD /usersrealizará la misma solicitud pero no recuperará la lista de usuarios.

          Las solicitudes HEAD son útiles para verificar qué devolverá una solicitud GET antes de realizar una solicitud GET, como antes de 
          descargar un archivo grande o un cuerpo de respuesta. Obtenga más información sobre las solicitudes HEAD en MDN .

           Vale la pena señalar que no todos los puntos finales que admiten GET admitirán HEAD; esto depende completamente de la API que está probando.
  
  *OPTIONS: Estas solicitudes no son tan utilizadas pero son muy utililes para probar errores faltaes de la API



  ===============CODIGOS DE RESPUESTA===================
  Son los codigos que se enviaran desde el servidor hacia el cliente para informa el estado de la peticion
  https://en.wikipedia.org/wiki/List_of_HTTP_status_codes

  //los codigos docientos indican que todo esta bien
  *200: ok -> todo esta bien

  //los codigos trecientos sirven para redireccionar al cliente a otra url

  //los codigos cuatrocientos indican errores en los recursos
  *404: not found -> recurso no encontrado
  *403: forbidden --> la solicitud fue valida, pero el servidor rechaza la accion, por falta de permisos del usuario por ejemplo
 
  // los codigos quinientos indican errores del servidor




  ===========HERRAMIENTAS===================
  POSTMAN || Insomnia rest client: para permite crear peticiones sobre Apis de una manera muy sencialla para poder probar las mismas

  
  ==================Mongoose=====================
  Mongoose es un modulo de node js, que permite definir schemas dado que mongodb es carente de schemas,
  a demas permite crear de la db con el backend de una manera mas rapida y sencialla

  En el esquema se definen los campos que contendria cada documento en una determinada colleccion

  Al nivel del la carpeta root, por estandar se crea una carpeta llamada models,
  el nombre de los archivos de models van en singular y los modelos en plural por estandar

  models
     product.js
        //export 
        mongoose.model('products', model)
     category.js
        

  Importar el modelos
  --------------------------
  const schemaProducts = require('./models/product') // ./ directorio raiz, product.js => se omite la extencion


  Encriptacion
  --------------------
  usar libreria bcrypt => require('bcrypt-nodejs')

  Md5 para gravatar
  ------------------
  Generar avatar con registrando emails, gravatar usa md5 en sus url para generar los avatar
  npm i -S crypto




  ==================JSON Web Tokens=========================
  En caso de tener el backend separado completamente del frontend, para gestionar las seciones se puede
  utilizar json web tokens
  https://jwt.io/
  Json web tokens es un standar, este token queda almacenado en el localstorage o en el session storage
  por cada peticion http que se haga del cliente al server, este toque viajara en el header de las peticiones

  json web tokes se divide en 3 partes
    header: informacion del token , Encriptacion y tipo de token
    payload: datos a enviar al server => sub->id publico, se pueden añadir fechas de caducidad del token, efectos,
             tiene un atributo admin: true por defecto, que no se puede manejar como publico debe tratarse en el server
    verify signature: verifica que el token corresponda a uno valido, este tiene un atributo secret por defecto, que no puede viajar publicamente
                      por lo que es necesario tratarlo en el server

                      el secret concatena el header y payload, apartir de este se verifica la validez del token

 modulo de node js para json web tokens
 ------------------------------------------
 npm i -S jwt-simple

 para el manejo de fecha en js
 ------------------------------
 npm i -S moment



 ==============Renderizar html con nodejs=================
 librerias
 npm i -S express-handlebars

*/